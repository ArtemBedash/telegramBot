import { Telegraf } from "telegraf";
import OpenAI from "openai";
import dotenv from "dotenv";
import cron from "node-cron";

dotenv.config();

const BOT_USERNAME = "frontend_guy_bot";
let CHAT_ID = process.env.DAILY_CHAT_ID;

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userChats = {};

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
const escapeHTML = (text) => text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ ```
const formatMessage = (text) => {
    const parts = text.split(/```/g);
    let result = "";
    parts.forEach((part, i) => {
        const escaped = escapeHTML(part);
        if (i % 2 === 1) result += `<pre>${escaped}</pre>`;
        else result += escaped;
    });
    return result;
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on("text", async (ctx) => {
    try {
        const chatId = ctx.chat.id;

        // –õ–æ–≥–∏—Ä—É–µ–º chatId –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if (!CHAT_ID) {
            CHAT_ID = chatId;
            console.log("chatId –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", CHAT_ID);
        }

        const text = ctx.message.text;
        const chatType = ctx.chat.type;

        // –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É–ª–∏ –±–æ—Ç–∞
        if (chatType.includes("group") && !text.includes(`@${BOT_USERNAME}`)) return;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userChats[chatId]) {
            userChats[chatId] = [
                {
                    role: "system",
                    content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ JS, TS –∏ React. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –º–∞–∫—Å–∏–º—É–º 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π , –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –ù–µ –æ–±—Ä–µ–∑–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –ø–∏—à–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é"
                }
            ];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userChats[chatId].push({ role: "user", content: text });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è GPT
        const response = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: userChats[chatId],
            max_tokens: 450
        });

        const reply = response.choices[0].message.content;
        userChats[chatId].push({ role: "assistant", content: reply });

        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        console.log("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —á–∞—Ç–æ–º", chatId, userChats[chatId]);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        const sentMessage = await ctx.reply(formatMessage(reply), { parse_mode: "HTML" });

        // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ (24 —á–∞—Å–∞)
        setTimeout(async () => {
            try {
                await ctx.deleteMessage(sentMessage.message_id);
                await ctx.deleteMessage(ctx.message.message_id);

                // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏–∑ –ø–∞–º—è—Ç–∏
                delete userChats[chatId];
                console.log("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —á–∞—Ç–æ–º", chatId, "—É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞");
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
            }
        }, 8640000); // 24 —á–∞—Å–∞

    } catch (err) {
        console.error(err);
        await ctx.reply("–û—à–∏–±–∫–∞ ü§ñ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");

// --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å ---
const questions = [
    "–ö–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript –∏ –∫–∞–∫ –∏—Ö –æ–±—ä—è–≤–ª—è—Ç—å?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ JavaScript?",
    "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ JavaScript?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—ä–µ–∫—Ç—ã –≤ JavaScript? –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ Map –∏ Set –≤ JavaScript –∏ TypeScript –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è function expression, function declaration, arrow function –∏ IIFE?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ hoisting –≤ JavaScript?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ (closure) –∏ –∫–∞–∫ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç this –≤ JavaScript?",
    "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Call, Bind –∏ Apply?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–ª–∞—Å—Å—ã –≤ JavaScript –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ Promise –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async/await?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ Event Loop –≤ JavaScript?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏ –º–∏–∫—Ä–æ—Ç–∞—Å–∫–∏?",
    "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ proto / prototype –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?",
    "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
    "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º/–∏–º–ø–æ—Ä—Ç–æ–º (ESM)?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–ª–∏—Ñ–∏–ª–ª—ã –∏ –∫–æ–≥–¥–∞ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º?",
    "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–∏—Ñ–∏–ª –¥–ª—è forEach?",
    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –≤ JavaScript?"
];

// –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞–≤–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 11:00
cron.schedule("0 11 * * *", async () => {
    if (!CHAT_ID) return; // –µ—Å–ª–∏ chatId –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

    try {
        const question = questions[Math.floor(Math.random() * questions.length)];
        const sentDailyMessage = await bot.telegram.sendMessage(CHAT_ID, question);

        // –£–¥–∞–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
        setTimeout(async () => {
            try {
                await bot.telegram.deleteMessage(CHAT_ID, sentDailyMessage.message_id);
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", err);
            }
        }, 8640000);

        console.log("–í–æ–ø—Ä–æ—Å –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", question);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", err);
    }
});
